{"version":3,"sources":["Square.js","NeighbourHandler.js","Board.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","onClick","handleClick","className","id","React","Component","NeighbourHandler","rowPosition","columnPosition","points","neighbours","forEach","x","y","push","filter","neighbour","board","fetchNeighbours","map","neighbourCell","provideCellState","isCellValid","_ref","undefined","fetchNeighboursState","reduce","state1","state2","Board","length","width","state","generateGrid","breadth","neighbourHandler","changeLifeZone","bind","assertThisInitialized","aliveCells","lifeZones","0","1","rowIndex","colIndex","event","_this2","document","getElementById","target","setState","cellValue","src_Square","key","_this3","row","rowJSX","col","renderCell","nextGeneration","value","slice","column","calculateNextState","aliveNeighbours","calculateAliveNeighbours","cellState","Array","fill","Game","startLife","boardRef","createRef","src_Board","ref","setInterval","current","ReactDOM","render","src_Game"],"mappings":"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","file":"static/js/main.3851d70f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./cellStyle.css\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  render() {\n    return (\n      <button\n        onClick={this.props.handleClick}\n        className={this.props.className}\n        id={this.props.id}\n      />\n    );\n  }\n}\n\nexport default Square;\n","class NeighbourHandler {\n  fetchNeighbours(rowPosition, columnPosition) {\n    let points = [-1, 0, 1];\n    let neighbours = [];\n\n    points.forEach(x => {\n      points.forEach(y => {\n        neighbours.push([rowPosition + x, columnPosition + y]);\n      });\n    });\n\n    return neighbours.filter(neighbour => {\n      return !(neighbour[0] === rowPosition && neighbour[1] === columnPosition);\n    });\n  }\n\n  fetchNeighboursState(board, rowPosition, columnPosition) {\n    return this.fetchNeighbours(rowPosition, columnPosition).map(\n      neighbourCell =>\n        this.provideCellState(board, neighbourCell[0], neighbourCell[1])\n    );\n  }\n\n  provideCellState(board, rowPosition, columnPosition) {\n    if (this.isCellValid(board, { rowPosition, columnPosition })) {\n      return board[rowPosition][columnPosition];\n    }\n    return 0;\n  }\n\n  isCellValid(board, { rowPosition, columnPosition }) {\n    return (\n      board[rowPosition] != undefined &&\n      board[rowPosition][columnPosition] != undefined\n    );\n  }\n\n  calculateAliveNeighbours(board, rowPosition, columnPosition) {\n    let neighbourStates = this.fetchNeighboursState(\n      board,\n      rowPosition,\n      columnPosition\n    );\n    return neighbourStates.reduce((state1, state2) => state1 + state2);\n  }\n}\n\nexport default NeighbourHandler;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport NeighbourHandler from \"./NeighbourHandler\";\nimport \"./cellStyle.css\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.length = 10;\n    this.width = 10;\n    this.state = {\n      board: this.generateGrid({ length: this.length, breadth: this.width })\n    };\n    this.neighbourHandler = new NeighbourHandler();\n    this.changeLifeZone = this.changeLifeZone.bind(this);\n    this.aliveCells = [];\n    this.lifeZones = {\n      0: [null, null, null, 1, null, null, null, null],\n      1: [null, null, 1, 1, null, null, null, null]\n    };\n  }\n\n  handleClick(rowIndex, colIndex, event) {\n    document.getElementById(event.target.id).className = \"black-cell \";\n    this.setState(state => {\n      this.aliveCells.push([rowIndex, colIndex]);\n      state.board[rowIndex][colIndex] = 1;\n      return { board: state.board };\n    });\n  }\n\n  renderCell(rowIndex, colIndex, cellValue) {\n    let className = \"cell\";\n    if (cellValue == 1) {\n      className = \"black-cell\";\n    }\n    return (\n      <Square\n        key={rowIndex + \"_\" + colIndex}\n        id={rowIndex + \"_\" + colIndex}\n        handleClick={this.handleClick.bind(this, rowIndex, colIndex)}\n        className={className}\n      />\n    );\n  }\n\n  render() {\n    return this.state.board.map((row, rowIndex) => {\n      let rowJSX = row.map((col, colIndex) =>\n        this.renderCell(rowIndex, colIndex, row[colIndex])\n      );\n      rowJSX.push(<br key={\"_\" + rowIndex} />);\n      return rowJSX;\n    });\n  }\n\n  changeLifeZone() {\n    let nextGeneration = [];\n    nextGeneration = this.state.board.map(value => value.slice());\n\n    for (let row = 0; row < this.length; row++) {\n      for (let column = 0; column < this.width; column++) {\n        nextGeneration[row][column] = this.calculateNextState(row, column);\n      }\n    }\n    this.setState({ board: nextGeneration });\n  }\n\n  calculateNextState(rowPosition, columnPosition) {\n    let aliveNeighbours = this.neighbourHandler.calculateAliveNeighbours(\n      this.state.board,\n      rowPosition,\n      columnPosition\n    );\n\n    let cellState = this.neighbourHandler.provideCellState(\n      this.state.board,\n      rowPosition,\n      columnPosition\n    );\n\n    if (aliveNeighbours > 3) {\n      return null;\n    }\n    let nextState = this.lifeZones[cellState][aliveNeighbours];\n    return nextState;\n  }\n\n  generateGrid({ length, breadth }) {\n    let rows = new Array(breadth).fill(null);\n    let grid = rows.map(x => new Array(length).fill(null));\n    return grid;\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Board from \"./Board\";\nimport \"./boardStyle.css\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.startLife = this.startLife.bind(this);\n    this.boardRef = React.createRef();\n  }\n  render() {\n    return (\n      <div className=\"board\">\n        <Board ref={this.boardRef} />\n        <button onClick={this.startLife} className=\"start-life-btn\">\n          Start Life\n        </button>\n      </div>\n    );\n  }\n\n  startLife() {\n    setInterval(() => {\n      {\n        this.boardRef.current.changeLifeZone();\n      }\n    }, 100);\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}